package ${class.rootPack}.service;

import ${class.pack}.${class.name};
<#list class.fields as field>
	<#if field.type="pojo">
import ${field.pojo.pack}.${field.pojo.name};
	</#if>
</#list>
/**
 * Manager test<br>
 * Freemarker AutoGenerated
 * 
 * @date ${time} 
 * 
 */
public class ${class.name}ManagerTest extends BaseManagerTestCase {

	private GenericManager<${class.name}, Long> ${class.spell}Manager;

	public void set${class.name}Manager(GenericManager<${class.name}, Long> ${class.spell}Manager) {
		this.${class.spell}Manager = ${class.spell}Manager;
	}
	
	<#list class.fields as field>
		<#if field.type="pojo">
		
	private GenericManager<${field.pojo.name}, Long> ${field.pojo.spell}Manager;

	public void set${field.pojo.name}Manager(GenericManager<${field.pojo.name}, Long> ${field.pojo.spell}Manager) {
		this.${field.pojo.spell}Manager = ${field.pojo.spell}Manager;
	}
		</#if>	
	</#list>

	public void testAddUpdateAndRemove() throws Exception {
		${class.name} ${class.spell} = new ${class.name}();
		<#list class.fields as field>
			<#if field.name!="id">
				<#if field.type="string">
		${class.spell}.set${field.upper}("${field.name}1");	
				</#if>
				<#if field.type="int">
		${class.spell}.set${field.upper}(1);	
				</#if>
			</#if>
		</#list>

		${class.spell} = ${class.spell}Manager.save(${class.spell});
		<#list class.fields as field>
			<#if field.name!="id">
				<#if field.type="string">
		assertEquals("${field.name}1", ${class.spell}.get${field.upper}());
				</#if>
				<#if field.type="int">
		assertEquals(1, ${class.spell}.get${field.upper}());
				</#if>
			</#if>
		</#list>

		log.debug("update ${class.spell}...");
		<#list class.fields as field>
			<#if field.name!="id">
				<#if field.type="string">
		${class.spell}.set${field.upper}("${field.name}2");	
				</#if>
				<#if field.type="int">
		${class.spell}.set${field.upper}(2);	
				</#if>
			</#if>
		</#list>

		${class.spell} = ${class.spell}Manager.get(${class.spell}.getId());
		<#list class.fields as field>
			<#if field.name!="id">
				<#if field.type="string">
		assertEquals("${field.name}2", ${class.spell}.get${field.upper}());
				</#if>
				<#if field.type="int">
		assertEquals(2, ${class.spell}.get${field.upper}());
				</#if>
			</#if>
		</#list>

		log.debug("removing ${class.spell}...");

		${class.spell}Manager.delete(${class.spell}.getId());

		try {
			${class.spell} = ${class.spell}Manager.get(${class.spell}.getId());
			fail("Expected 'Exception' not thrown");
		} catch (Exception e) {
			log.debug(e.toString());
			assertNotNull(e);
		}
	}
}
