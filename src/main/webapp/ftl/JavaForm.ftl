package ${class.pack}.web.controller;
<#if class.hasPojoField>
import java.util.List;
</#if>

import javax.servlet.http.HttpServletRequest;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
<#if class.hasPojoField>
import org.springframework.web.bind.WebDataBinder;
import org.springframework.web.bind.annotation.InitBinder;
</#if>
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import ${class.pack}.${class.name};
import ${class.rootPack}.service.GenericManager;
<#list class.fields as field>
	<#if field.type="pojo">
import ${field.pojo.pack}.${field.pojo.name};
	</#if>
</#list>

/**
 * Handle Form (New Update Delete)<br>
 * Freemarker AutoGenerated
 * 
 * @date ${time} 
 * 
 */
@Controller
@RequestMapping("/${class.spell}Form.do")
public class ${class.name}Form {
	private final Logger log = LoggerFactory.getLogger(getClass());

	@Autowired
	@Qualifier("${class.spell}Manager")
	private GenericManager<${class.name}, Long> ${class.spell}Manager;

	public void set${class.name}Manager(GenericManager<${class.name}, Long> ${class.spell}Manager) {
		this.${class.spell}Manager = ${class.spell}Manager;
	} 
	<#list class.fields as field>
		<#if field.type="pojo">
		
	@Autowired
	@Qualifier("${field.pojo.spell}Manager")
	private GenericManager<${field.pojo.name}, Long> ${field.pojo.spell}Manager;
	
	public void set${field.pojo.name}Manager(GenericManager<${field.pojo.name}, Long> ${field.pojo.spell}Manager) {
		this.${field.pojo.spell}Manager = ${field.pojo.spell}Manager;
	}
		</#if>	
	</#list>
	
	<#if class.hasPojoField>
	@InitBinder
    public void setAllowedFields(WebDataBinder dataBinder) {
        dataBinder.setDisallowedFields(new String[] {<#list class.fields as field><#if field.type="pojo">"${field.name}",</#if></#list>});
    }
	</#if>
	
	/**
	 * Enter form page(get the object if exist or just new one)
	 * 
	 * @param id
	 * @param model
	 */
	@RequestMapping(method = RequestMethod.GET)
	public String setupForm(
			@RequestParam(value = "id", required = false) Long id,
			ModelMap model) {
		${class.name} ${class.spell};
		if (id == null || id == 0L) {
			${class.spell} = new ${class.name}();
		} else {
			${class.spell} = ${class.spell}Manager.get(id);
		}
		model.addAttribute("${class.spell}",${class.spell});
		
		<#list class.fields as field>
		<#if field.type="pojo">
			List<${field.pojo.name}> ${field.pojo.spell}List=${field.pojo.spell}Manager.getAll();
			model.addAttribute("${field.pojo.spell}List",${field.pojo.spell}List);
		</#if>	
		
		</#list>
		return "${class.module}/${class.spell}Form";

	}
 
 	/**
	 * Submit(save or delete)
	 * 
	 * @param ${class.spell}
	 * @param delete
	 * @param result
	 * @param status
	 * @return
	 */
	@RequestMapping(method = RequestMethod.POST)
	public String processSubmit(@ModelAttribute("${class.spell}") ${class.name} ${class.spell},
			@RequestParam(value = "delete", required = false) String delete,
			HttpServletRequest request) {
		if (delete != null) {
			${class.spell}Manager.delete(${class.spell}.getId());
			log.debug("delete ${class.spell} id:"+${class.spell}.getId());
			return "redirect:${class.spell}List.do";
		} else {		
			String action=${class.spell}.getId()==0?"new":"update";		
<#list class.fields as field>
		<#if field.type="pojo">		
			
			${field.pojo.name} ${field.pojo.spell}=${field.pojo.spell}Manager.get(Long.valueOf(request.getParameter("${field.pojo.spell}")));  
			${class.spell}.set${field.pojo.name}(${field.pojo.spell});
		</#if>			
	</#list>
			${class.spell} = ${class.spell}Manager.save(${class.spell});
			log.debug(action+" ${class.spell} id:"+${class.spell}.getId());
			return "redirect:${class.spell}List.do";
		}
	}
}