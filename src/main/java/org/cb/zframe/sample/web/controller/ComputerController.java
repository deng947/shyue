package org.cb.zframe.sample.web.controller;

import java.util.ArrayList;
import java.util.List;
import javax.servlet.http.HttpServletRequest;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import org.cb.zframe.dao.QueryObject;
import org.cb.zframe.sample.Computer;
import org.cb.zframe.service.GenericManager;
import org.cb.zframe.web.util.PageUtil;

/**
 * Handle View (ViewObject ViewList QueryList BatchDelete)<br>
 * Freemarker AutoGenerated
 * 
 * @date 2009-03-13 16:46:15 
 * 
 */
@Controller
public class ComputerController {
	private final Logger log = LoggerFactory.getLogger(getClass());
	@Autowired
	@Qualifier("computerManager")
	private GenericManager<Computer, Long> computerManager;

	public void setComputerManager(GenericManager<Computer, Long> computerManager) {
		this.computerManager = computerManager;
	}
	
	/**
	 * ViewObjectById
	 * 
	 * @param id
	 * @param model
	 */
	@RequestMapping("/computer.do")
	public String viewComputer(@RequestParam("id") Long id, Model model) {
		Computer computer = computerManager.get(id);
		model.addAttribute(computer);
		return "sample/computer"; 
	}
	
	/**
	 * ListView 
	 * 
	 * @param request 
	 * @param model 
	 */
	@RequestMapping("/computerList.do")
	public String viewComputerList(HttpServletRequest request, Model model)
			throws Exception {	
		PageUtil page = new PageUtil(computerManager);
		//String queryName = (String) request.getParameter("queryName");
		List<QueryObject> l = new ArrayList<QueryObject>();
			
		/* TODO add your Query here*/
		/*if (queryName != null && queryName.length() != 0) {
			QueryObject q = new QueryObject("description", QueryObject.LIKE,
					queryName + "%", QueryObject.STR);
			l.add(q);
		}*/
		page.setPageObjectToModel(request, model, l);
		return "sample/computerList";
	}
	
	/**
	 * Batch delete items
	 *
	 * @param request
	 * @param model
	 * @return
	 * @throws Exception
	 */
	@RequestMapping("/deleteComputerList.do")
	public String deleteComputerList(HttpServletRequest request, Model model)
			throws Exception {
		String[] items = request.getParameterValues("item");
		if (items != null && items.length > 0) {
			Long[] ids = new Long[items.length];
			for (int i = 0; i < items.length; i++) {
				ids[i] = Long.valueOf(items[i]);
			}
			computerManager.delete(ids, false);	
			logDelete(ids);	
		}
		//to viewList
		return viewComputerList(request, model);
	}	
	
	private void logDelete(Long[] ids) {
		if (log.isDebugEnabled()) {
			StringBuffer sb = new StringBuffer("delete computerList ids:");
			for (int i = 0; i < ids.length; i++) {
				sb.append(ids[i]).append(",");			
			}
			log.debug(sb.toString());
		}
	}
}
