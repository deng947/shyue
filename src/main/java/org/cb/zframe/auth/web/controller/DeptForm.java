package org.cb.zframe.auth.web.controller;
import java.util.List;

import javax.servlet.http.HttpServletRequest;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.WebDataBinder;
import org.springframework.web.bind.annotation.InitBinder;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import org.cb.zframe.auth.Dept;
import org.cb.zframe.auth.Org;
import org.cb.zframe.service.GenericManager;

/**
 * Handle Form (New Update Delete)<br>
 * Freemarker AutoGenerated
 * 
 * @date 2009-03-11 14:21:54 
 * 
 */
@Controller
@RequestMapping("/deptForm.do")
public class DeptForm {
	private final Logger log = LoggerFactory.getLogger(getClass());

	@Autowired
	@Qualifier("deptManager")
	private GenericManager<Dept, Long> deptManager;

	public void setDeptManager(GenericManager<Dept, Long> deptManager) {
		this.deptManager = deptManager;
	} 
		
	@Autowired
	@Qualifier("orgManager")
	private GenericManager<Org, Long> orgManager;
	
	public void setOrgManager(GenericManager<Org, Long> orgManager) {
		this.orgManager = orgManager;
	}
	
	@InitBinder
    public void setAllowedFields(WebDataBinder dataBinder) {
        dataBinder.setDisallowedFields(new String[] {"org",});
    }
	
	/**
	 * Enter form page(get the object if exist or just new one)
	 * 
	 * @param id
	 * @param model
	 */
	@RequestMapping(method = RequestMethod.GET)
	public String setupForm(
			@RequestParam(value = "id", required = false) Long id,
			ModelMap model) {
		Dept dept;
		if (id == null || id == 0L) {
			dept = new Dept();
		} else {
			dept = deptManager.get(id); 
		}
		List<Org> orgList=orgManager.getAll();
		model.addAttribute("orgList",orgList);
		model.addAttribute("dept",dept);
		return "auth/deptForm";

	}
 
 	/**
	 * Submit(save or delete)
	 * 
	 * @param dept
	 * @param delete
	 * @param result
	 * @param status
	 * @return
	 */
	@RequestMapping(method = RequestMethod.POST)
	public String processSubmit(@ModelAttribute("dept") Dept dept,
			@RequestParam(value = "delete", required = false) String delete,
			HttpServletRequest request) {
		if (delete != null) {
			deptManager.delete(dept.getId());
			log.debug("delete dept id:"+dept.getId());
			return "redirect:deptList.do";
		} else {		
			String action=dept.getId()==0?"new":"update";		
			
			Org org=orgManager.get(Long.valueOf(request.getParameter("org")));  
			dept.setOrg(org);
			dept = deptManager.save(dept);
			log.debug(action+" dept id:"+dept.getId());
			return "redirect:deptList.do";
		}
	}
}